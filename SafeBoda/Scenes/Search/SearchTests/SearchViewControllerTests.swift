//
//  SearchViewControllerTests.swift
//  SafeBoda
//
//  Created by Achem Samuel on 6/23/20.
//  Copyright (c) 2020 Achem Samuel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SafeBoda
import XCTest

class SearchViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: SearchViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupSearchViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSearchViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "SearchViewController") as! SearchViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class SearchBusinessLogicSpy: SearchBusinessLogic
    {
        var searchCardsWasCalled = false
        func searchCards(request: Search.Search.Request) {
            searchCardsWasCalled = true
        }
        
        var processCardTapWasCalled = false
        func processCardTap(request: Search.ProcessCardTap.Request) {
            processCardTapWasCalled = true
        }
        
        
    }
    
    // MARK: Tests
    func testSearchForCards() {
        let spy = SearchBusinessLogicSpy()
        sut.interactor = spy
        let request = Search.Search.Request(query: "snapcaster")
        sut.interactor?.searchCards(request: request)
        XCTAssertTrue(spy.searchCardsWasCalled, "searchCards(request: request); Should ask the interactor to make a search with query")
    }
    
    func testProceeCardTap() {
        let spy = SearchBusinessLogicSpy()
        sut.interactor = spy
        let request = Search.ProcessCardTap.Request(id: "")
        sut.interactor?.processCardTap(request: request)
        XCTAssertTrue(spy.processCardTapWasCalled, "processCardTap(request:); Should ask the interactor to make a filter and retrn the selected card details for parsing")
    }
    
}
