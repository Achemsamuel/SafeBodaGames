//
//  SearchInteractorTests.swift
//  SafeBoda
//
//  Created by Achem Samuel on 6/23/20.
//  Copyright (c) 2020 Achem Samuel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import SafeBoda
import XCTest

class SearchInteractorTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: SearchInteractor!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupSearchInteractor()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupSearchInteractor()
    {
        sut = SearchInteractor()
    }
    
    // MARK: Test doubles
    
    class SearchPresentationLogicSpy: SearchPresentationLogic
    {
        var presentErrorWasCalled = false
        func presentError(response: Search.ResponseError.Response) {
            presentErrorWasCalled = true
        }
        
        var presentCardsWasCalled = false
        func presentCards(response: Search.Search.Response) {
            presentErrorWasCalled = true
        }
        
        var presentLoaderWasCalled = false
        func presentLoader() {
            presentLoaderWasCalled = true
        }
        
    }
    
    // MARK: Tests
    
    func testFetchCardsFromSearch()
    {
        let spy = SearchPresentationLogicSpy()
        sut.presenter = spy
        let request = Search.Search.Request(query: "duress")
        let apiclient = ApiClient()
        let params: [String:Any] = ["q": request.query, "size": 10]
        sut.searchCards(request: request)
        apiclient.get(urlSuffix: request.query, params: params) { [weak self] result in
            switch result {
            case .success(let data):
                do {
                    let cardListObject = try JSONDecoder().decode(CardListObject.self, from: data)
                    print(cardListObject)
                    self?.sut?.presenter?.presentCards(response: Search.Search.Response(cards: cardListObject.data ?? []))
                    XCTAssertTrue(spy.presentCardsWasCalled, "searchCards(request: ) should ask the presenter to format the search results")
                } catch {
                    print(error.localizedDescription)
                }
            case .failure(let error):
                self?.sut?.presenter?.presentError(response: Search.ResponseError.Response(error: error))
                XCTAssertTrue(spy.presentErrorWasCalled, "searchCards(request: ) should ask the presenter to present an error of it occurs")
            }
        }
         XCTAssertTrue(spy.presentLoaderWasCalled, "searchCards(request: ) should ask the presenter to present a loader indicating a network action")
    }
}
