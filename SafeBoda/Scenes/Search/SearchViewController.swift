//
//  SearchViewController.swift
//  SafeBoda
//
//  Created by Achem Samuel on 6/23/20.
//  Copyright (c) 2020 Achem Samuel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

final class SearchViewController: UIViewController
{
    static let STORYBOARD_ID = String(describing: SearchViewController.self)
    class var storyboardName: String {
        return StoryBoards.Main.rawValue
    }
    
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SearchInteractor()
        let presenter = SearchPresenter()
        let router = SearchRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    
    
    @IBOutlet weak private var discoverTextTopConstraint: NSLayoutConstraint!
    @IBOutlet weak private var tableView: UITableView!
    @IBOutlet weak private(set) var searchBar: UISearchBar!
    @IBOutlet weak private var emptyStateView: UIView!
    @IBOutlet weak private var activityIndicator: UIActivityIndicatorView!
    @IBOutlet weak private var searchBarHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak private var searchIcon: UIButton!
    @IBOutlet weak private(set) var emptyStateText: UILabel!
    
    
    //
    private let refreshControl = UIRefreshControl()
    private var isFirstTimeLaunch = true
    private var viewModel = Search.ViewModel()
    private var rightBarButtonItem: UIBarButtonItem?
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        initialSetup()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.navigationController?.isNavigationBarHidden = true
        animateViewUpwards()
    }
    
    private func initialSetup() {
        setupTableView()
        setupSearchBar()
        navigationItem.backBarButtonItem = UIBarButtonItem(title: "", style: .plain, target: nil, action: nil)
    }
    
    private func setupTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.estimatedRowHeight = ContentListTableViewCell.estimatedHeight
        tableView.rowHeight = UITableView.automaticDimension
        tableView.refreshControl = self.refreshControl
        tableView.register(UINib(nibName: ContentListTableViewCell.NIB_NAME, bundle: nil), forCellReuseIdentifier: ContentListTableViewCell.Identifier)
        refreshControl.addTarget(self, action: #selector(didBeginRefreshing), for: .valueChanged)   
    }
    
    private func setupSearchBar() {
        searchBar.discoverGreySearchBar()
        searchBar.delegate = self
        searchBar.becomeFirstResponder()
        makeSearchBarVisibleOrHidden()
    }
    
    @objc func didBeginRefreshing() {
        refreshControl.endRefreshing()
    }
    
    
    private func animateViewUpwards() {
        if isFirstTimeLaunch {
            UIView.animate(withDuration: 0.65, animations: {
                self.discoverTextTopConstraint.constant = 15
                self.view.layoutIfNeeded()
            })
            isFirstTimeLaunch = false
        }
    }
    
    @IBAction func searchButtonTapped(_ sender: UIButton) {
        makeSearchBarVisibleOrHidden()
        handleEmptyStateCheckWithText(searchBar.text?.count ?? 0)
    }
    
    private func makeSearchBarVisibleOrHidden() {
        UIView.animate(withDuration: 0.4, animations: {
            self.searchBar.alpha = self.viewModel.isSearchBarVisible ? 0 : 1
            self.viewModel.isSearchBarVisible ? self.searchIcon.setImage(UIImage.searchIcon, for: .normal) : self.searchIcon.setImage(UIImage.navigatonCloseItemIcon, for: .normal)
            self.searchBarHeightConstraint.constant = self.viewModel.isSearchBarVisible ? 0 : self.viewModel.searchHeight
            self.searchBar.layoutIfNeeded()
        })
        viewModel.isSearchBarVisible = !viewModel.isSearchBarVisible
        let _ = self.viewModel.isSearchBarVisible ? searchBar.becomeFirstResponder() : searchBar.resignFirstResponder()
    }
    
}
extension SearchViewController: SearchDisplayLogic {
    func displayCards(viewModel: Search.Search.ViewModel) {
        self.viewModel.cardsVM = viewModel.cardsVM
        self.activityIndicator.stopAnimating()
        handleEmptyStateCheckWithText(viewModel.cardsVM.count)
        emptyStateText.text = searchBar.text?.count == 0 ? "You have not searched for a game yet ðŸ˜¢" : "No card games found"
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    
    func displayError(viewModel: Search.ResponseError.ViewModel) {
        print("error \(viewModel.message)")
        self.activityIndicator.stopAnimating()
    }
    
    func displayLoader() {
        self.activityIndicator.startAnimating()
    }
}

extension SearchViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.viewModel.cardsVM.count >= 10 ? 10 : self.viewModel.cardsVM.count 
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: ContentListTableViewCell.Identifier, for: indexPath) as? ContentListTableViewCell
        cell?.configureView(viewModel: self.viewModel.cardsVM[indexPath.row])
        cell?.indexPath = indexPath
        cell?.delegate = self
        return cell ?? UITableViewCell()
    }
}

extension SearchViewController: UISearchBarDelegate {
    fileprivate func handleEmptyStateCheckWithText(_ count: Int) {
        emptyStateView.isHidden = count == 0 ? false : true
        emptyStateText.text = count == 0 ? "You have not searched for a game yet ðŸ˜¢" : "No card games found"
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        handleEmptyStateCheckWithText(searchBar.text?.count ?? 0)
        guard searchBar.text?.count ?? 0 > 0 else {return}
        NSObject.cancelPreviousPerformRequests(withTarget: self)
        perform(#selector(search), with: self, afterDelay: 1.5)
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        if (searchBar.text ?? "").count < 1 {return}
        if !ReachabilityHelper.isInternetAvailable() {
            CDAlertHelper.showBanner(title: "", message: GeneralMessages.noInternet, success: false)
            return
        }
        self.emptyStateView.isHidden = true
        interactor?.searchCards(request: Search.Search.Request(query: searchBar.text ?? ""))
        searchBar.resignFirstResponder()
    }
    
    @objc func search() {
        guard let searchText = searchBar.text else { return }
        if !ReachabilityHelper.isInternetAvailable() {
            CDAlertHelper.showBanner(title: "", message: GeneralMessages.noInternet, success: false)
            return
        }
        self.emptyStateView.isHidden = true
        interactor?.searchCards(request: Search.Search.Request(query: searchText))
        searchBar.resignFirstResponder()
    }
    
}

extension SearchViewController: CellTappedDelegate {
    func didTapCell(indexPath: IndexPath, cardId: String) {
        interactor?.processCardTap(request: Search.ProcessCardTap.Request(id: cardId))
        router?.routeToCardDetail(segue: nil)
    }
}
