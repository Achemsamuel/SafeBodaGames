//
//  CardDetailViewController.swift
//  SafeBoda
//
//  Created by Achem Samuel on 6/24/20.
//  Copyright (c) 2020 Achem Samuel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

final class CardDetailViewController: UIViewController
{
    static let STORYBOARD_ID = String(describing: CardDetailViewController.self)
    class var storyboardName: String {
        return StoryBoards.Main.rawValue
    }
    var interactor: CardDetailBusinessLogic?
    var router: (NSObjectProtocol & CardDetailRoutingLogic & CardDetailDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = CardDetailInteractor()
        let presenter = CardDetailPresenter()
        let router = CardDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    @IBOutlet weak private var imageView: UIImageView!
    @IBOutlet weak private var scrollView: UIScrollView!
    @IBOutlet weak private var containerImageView: UIView!
    @IBOutlet weak var cardName: UILabel!
    @IBOutlet weak var setName: UILabel!
    @IBOutlet weak var cardType: UILabel!
    @IBOutlet weak var rarity: UILabel!
    @IBOutlet weak var releaseDate: UILabel!
    @IBOutlet weak var manaCost: UILabel!
    @IBOutlet weak var cmc: UILabel!
    @IBOutlet weak var oracle: UILabel!
    @IBOutlet weak var standardLegal: UILabel!
    @IBOutlet weak var futurelegal: UILabel!
    @IBOutlet weak var historicLegal: UILabel!
    @IBOutlet weak var pioneerLegal: UILabel!
    @IBOutlet weak var modernLegal: UILabel!
    @IBOutlet weak var legacyLegal: UILabel!
    @IBOutlet weak var pauperLegal: UILabel!
    @IBOutlet weak var vintageLegal: UILabel!
    @IBOutlet weak var pennyLegal: UILabel!
    @IBOutlet weak var commanderLegal: UILabel!
    @IBOutlet weak var brawlLegal: UILabel!
    @IBOutlet weak var duelLegal: UILabel!
    @IBOutlet weak var oldSchoolLegal: UILabel!
    
    
    private var viewModel = CardDetail.ViewModel()
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        initialSetup()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.isNavigationBarHidden = false
        self.navigationController?.navigationBar.tintColor = .navBarTint()
        self.imageView.topAnchor.constraint(equalTo: self.view.topAnchor, constant: 0).isActive = true
    }
    
    private func initialSetup() {
        navigationController?.makeNavBarTransparent()
        interactor?.fetchDataOnLoad()
    }
    
}

extension CardDetailViewController: CardDetailDisplayLogic {
    func displayDataOnLoad(viewModel: CardDetail.FetchDataOnLoad.ViewModel) {
        self.viewModel.cardVM = viewModel.cardVM
        updateViewElements()
    }
    
    private func updateViewElements() {
        imageView.kf.setImage(with: URL(string: self.viewModel.cardVM.image.artCrop), placeholder: UIImage.defaultCardImage(), options: [.transition(.fade(1.0)), .progressiveJPEG(.default)])
        cardName.text = viewModel.cardVM.name
        cardType.text = ("\(CardDetail.CardDetailList.type.rawValue)\(viewModel.cardVM.cardType)")
        setName.text = ("\(CardDetail.CardDetailList.setName.rawValue)\(viewModel.cardVM.setName)")
        rarity.text = ("\(CardDetail.CardDetailList.rarity.rawValue)\(viewModel.cardVM.rarity)")
        releaseDate.text = ("\(CardDetail.CardDetailList.release.rawValue)\(viewModel.cardVM.releaseDate)")
        manaCost.text = ("\(CardDetail.CardDetailList.manaCost.rawValue)\(viewModel.cardVM.manaCost)")
        cmc.text = ("\(CardDetail.CardDetailList.cmc.rawValue)\(viewModel.cardVM.cmc)")
        oracle.text = ("\(CardDetail.CardDetailList.oracle.rawValue)\(viewModel.cardVM.oracleText)")
        standardLegal.text = ("\(CardDetail.Legalities.standard.rawValue)\(viewModel.cardVM.legalities.standard)")
        oldSchoolLegal.text = ("\(CardDetail.Legalities.oldSchool.rawValue)\(viewModel.cardVM.legalities.oldschool)")
        duelLegal.text = ("\(CardDetail.Legalities.duel.rawValue)\(viewModel.cardVM.legalities.duel)")
        brawlLegal.text = ("\(CardDetail.Legalities.brawl.rawValue)\(viewModel.cardVM.legalities.brawl)")
        commanderLegal.text = ("\(CardDetail.Legalities.commander.rawValue)\(viewModel.cardVM.legalities.commander)")
        pennyLegal.text = ("\(CardDetail.Legalities.penny.rawValue)\(viewModel.cardVM.legalities.penny)")
        vintageLegal.text = ("\(CardDetail.Legalities.vintage.rawValue)\(viewModel.cardVM.legalities.vintage)")
        pauperLegal.text = ("\(CardDetail.Legalities.pauper.rawValue)\(viewModel.cardVM.legalities.pauper)")
        legacyLegal.text = ("\(CardDetail.Legalities.legacy.rawValue)\(viewModel.cardVM.legalities.legacy)")
        modernLegal.text = ("\(CardDetail.Legalities.modern.rawValue)\(viewModel.cardVM.legalities.modern)")
        pioneerLegal.text = ("\(CardDetail.Legalities.pioneer.rawValue)\(viewModel.cardVM.legalities.pioneer)")
        historicLegal.text = ("\(CardDetail.Legalities.historic.rawValue)\(viewModel.cardVM.legalities.historic)")
        futurelegal.text = ("\(CardDetail.Legalities.future.rawValue)\(viewModel.cardVM.legalities.future)")
    }
}

extension CardDetailViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let y = scrollView.contentOffset.y + imageView.frame.height
        let height = max(60, y)
        let rect = CGRect(x: 0, y: 0, width: view.bounds.width, height: height)
        containerImageView.frame = rect
    }
}
